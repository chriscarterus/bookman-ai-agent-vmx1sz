syntax = "proto3";

package bookman.market.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// Global constants defined as options
option (validate.file).constants = {
  string_constants: [
    {
      name: "SUPPORTED_INTERVALS"
      value: "1m,5m,15m,30m,1h,4h,1d,1w"
    }
  ]
  int_constants: [
    {
      name: "MAX_HISTORICAL_DAYS"
      value: "365"
    },
    {
      name: "MAX_SYMBOLS_PER_REQUEST"
      value: "50"
    }
  ]
  double_constants: [
    {
      name: "MIN_CONFIDENCE_LEVEL"
      value: "0.8"
    },
    {
      name: "MAX_CONFIDENCE_LEVEL"
      value: "0.99"
    }
  ]
};

// Enhanced market data request with validation rules
message MarketDataRequest {
  // List of cryptocurrency symbols to fetch data for
  repeated string symbols = 1 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 50,
    unique: true,
    items: {
      string: {
        pattern: "^[A-Z0-9]{2,10}$"
      }
    }
  }];

  // Time interval for data aggregation
  string interval = 2 [(validate.rules).string = {
    in: ["1m", "5m", "15m", "30m", "1h", "4h", "1d", "1w"]
  }];

  // Maximum number of data points to return
  int32 limit = 3 [(validate.rules).int32 = {
    gt: 0,
    lte: 1000
  }];

  // Flag to include technical indicators
  bool include_indicators = 4;
}

// Technical indicators for market analysis
message TechnicalIndicators {
  double rsi_14 = 1;
  double macd = 2;
  double macd_signal = 3;
  double macd_histogram = 4;
  double sma_20 = 5;
  double sma_50 = 6;
  double sma_200 = 7;
  double bollinger_upper = 8;
  double bollinger_middle = 9;
  double bollinger_lower = 10;
  double volume_sma = 11;
}

// Error details for failed requests
message ErrorDetails {
  string code = 1;
  string message = 2;
  map<string, string> metadata = 3;
}

// Enhanced market data response
message MarketDataResponse {
  string symbol = 1;
  double price = 2;
  double volume = 3;
  double market_cap = 4;
  google.protobuf.Timestamp timestamp = 5;
  double change_24h = 6;
  TechnicalIndicators indicators = 7;
  ErrorDetails error_details = 8;
}

// Enhanced prediction request with validation
message PredictionRequest {
  string symbol = 1 [(validate.rules).string = {
    pattern: "^[A-Z0-9]{2,10}$"
  }];

  string horizon = 2 [(validate.rules).string = {
    in: ["1h", "4h", "1d", "1w", "1m"]
  }];

  double confidence_level = 3 [(validate.rules).double = {
    gte: 0.8,
    lte: 0.99
  }];

  bool include_features = 4;
}

// Confidence interval for predictions
message ConfidenceInterval {
  double lower_bound = 1;
  double upper_bound = 2;
  double confidence_level = 3;
}

// Historical accuracy metrics
message AccuracyMetrics {
  double mae = 1;  // Mean Absolute Error
  double rmse = 2; // Root Mean Square Error
  double mape = 3; // Mean Absolute Percentage Error
  int32 sample_size = 4;
  google.protobuf.Timestamp evaluation_period_start = 5;
  google.protobuf.Timestamp evaluation_period_end = 6;
}

// Feature importance for prediction model
message FeatureImportance {
  string feature_name = 1;
  double importance_score = 2;
  string description = 3;
}

// Enhanced prediction response
message PredictionResponse {
  double predicted_price = 1;
  ConfidenceInterval confidence_interval = 2;
  google.protobuf.Timestamp prediction_time = 3;
  string methodology = 4;
  AccuracyMetrics historical_accuracy = 5;
  repeated FeatureImportance feature_importance = 6;
}

// Enhanced market data service with comprehensive features
service MarketService {
  // Retrieves real-time market data with extended metrics
  rpc GetMarketData(MarketDataRequest) returns (MarketDataResponse) {
    option (validate.rules).rpc = {
      timeout: "5s"
    };
  }

  // Generates advanced price predictions with confidence intervals
  rpc GetPricePrediction(PredictionRequest) returns (PredictionResponse) {
    option (validate.rules).rpc = {
      timeout: "10s"
    };
  }

  // Provides real-time streaming updates with comprehensive metrics
  rpc StreamMarketData(MarketDataRequest) returns (stream MarketDataResponse) {
    option (validate.rules).rpc = {
      timeout: "0s" // Infinite timeout for streaming
    };
  }
}