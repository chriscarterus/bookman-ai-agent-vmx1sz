version: '3.8'

# Service definitions
services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # Proxy SSL
      - "8443:8443"  # Proxy SSL (Alternative)
      - "8001:8001"  # Admin API SSL
      - "8444:8444"  # Admin API SSL (Alternative)
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_PLUGINS=bundled,rate-limiting,cors,prometheus,jwt,oauth2
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml:ro
      - ./api-gateway/certificates:/etc/kong/certificates:ro
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bookman_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - RATE_LIMIT_WINDOW=3600
      - RATE_LIMIT_MAX=1000
    volumes:
      - auth_logs:/app/logs
    depends_on:
      - postgres
      - redis
    secrets:
      - jwt_secret
      - oauth_keys
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bookman_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Education Service
  education-service:
    build:
      context: ./education-service
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - ML_MODEL_PATH=/app/models
      - MAX_WORKERS=4
    volumes:
      - education_models:/app/models
      - education_logs:/var/log/security
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bookman_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=bookman
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user)"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - bookman_network
    secrets:
      - postgres_user
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    command: redis-server --requirepass $$(cat /run/secrets/redis_password)
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - bookman_network
    secrets:
      - redis_password
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - bookman_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:9.5.2
    volumes:
      - ./monitoring/grafana.ini:/etc/grafana/grafana.ini:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
    networks:
      - bookman_network
    depends_on:
      - prometheus
    secrets:
      - grafana_admin_password
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

# Networks
networks:
  bookman_network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      encrypt: "true"

# Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  prometheus_data:
  grafana_data:
  education_models:
  education_logs:
  auth_logs:

# Secrets
secrets:
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  oauth_keys:
    file: ./secrets/oauth_keys.json
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt