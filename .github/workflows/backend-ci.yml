name: Backend CI

# Trigger on push to main/develop and PRs
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'

# Environment variables
env:
  NODE_VERSION: '18.x'
  FORCE_COLOR: true
  CI: true
  NODE_OPTIONS: '--max-old-space-size=4096'

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Required permissions
permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

jobs:
  # Build job
  build:
    name: Build Backend Services
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.npm
            .eslintcache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc -b

      - name: Build packages
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
            **/.tsbuildinfo
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Test job
  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            **/dist
            **/.tsbuildinfo
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run unit tests
        run: npm run test -- --coverage --maxWorkers=4
        env:
          JEST_JUNIT_OUTPUT_DIR: ./reports/junit
          JEST_JUNIT_OUTPUT_NAME: junit.xml

      - name: Verify coverage thresholds
        run: |
          COVERAGE=$(npm run test:coverage -- --coverageReporters=json-summary | tail -1)
          if [[ $COVERAGE < 80 ]]; then
            echo "Coverage below threshold: $COVERAGE"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            ./src/backend/reports/junit
            ./src/backend/coverage
          retention-days: 30

  # Lint job
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            .eslintcache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint -- --cache --max-warnings=0 --format=sarif --output-file=eslint-results.sarif

      - name: Run Prettier check
        run: npm run format -- --check

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ./src/backend/eslint-results.sarif
          category: ESLint

  # Security job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --production --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk-results.sarif

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk-results.sarif
          category: Snyk

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}